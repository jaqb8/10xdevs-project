name: Pull Request

on:
  pull_request:
    branches:
      - staging
      - master
    paths-ignore:
      - "docs/**"
      - "**/README.md"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint:check

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: unit-coverage
          path: coverage/
          retention-days: 7

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Create test environment file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "SUPABASE_PUBLIC_KEY=${{ secrets.SUPABASE_PUBLIC_KEY }}" >> .env.test
          echo "USE_MOCKS=${{ vars.USE_MOCKS }}" >> .env.test
          echo "E2E_USERNAME=${{ secrets.E2E_USERNAME }}" >> .env.test
          echo "E2E_PASSWORD=${{ secrets.E2E_PASSWORD }}" >> .env.test
          echo "E2E_USER_ID=${{ secrets.E2E_USER_ID }}" >> .env.test
          echo "PUBLIC_ENV_NAME=${{ vars.ENV_NAME }}" >> .env.test

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7
          if-no-files-found: warn

  code-review:
    name: Code Review
    runs-on: ubuntu-latest
    environment: integration
    needs: [lint, unit-test, e2e-test]
    if: github.event.pull_request.draft == false
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"

      - name: Perform automated code review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          MODEL: gpt-5
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BLOCKING_REVIEW_VAR: ${{ vars.BLOCKING_REVIEW }}
        run: |
          BLOCKING_REVIEW=${BLOCKING_REVIEW_VAR:-false}
          export BLOCKING_REVIEW
          cursor-agent --force --model "$MODEL" --output-format=text --print <<'PROMPT_EOF'
          You are operating in a GitHub Actions runner performing automated code review. The gh CLI is available and authenticated via GH_TOKEN. You may comment on pull requests.

          Context:
          - Repo: ${{ github.repository }}
          - PR Number: ${{ github.event.pull_request.number }}
          - PR Head SHA: ${{ github.event.pull_request.head.sha }}
          - PR Base SHA: ${{ github.event.pull_request.base.sha }}
          - Blocking Review: ${BLOCKING_REVIEW}

          Objectives:
          1) Re-check existing review comments and reply resolved when addressed.
          2) Review the current PR diff and flag only clear, high-severity issues.
          3) Leave very short inline comments (1-2 sentences) on changed lines only and a brief summary at the end.

          Procedure:
          - Get existing comments: gh pr view --json comments
          - Get diff: gh pr diff
          - Get changed files with patches to compute inline positions: gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --paginate --jq '.[] | {filename,patch}'
          - Compute exact inline anchors for each issue (file path + diff position). Comments MUST be placed inline on the changed line in the diff, not as top-level comments.
          - Detect prior top-level "no issues" style comments authored by this bot (match bodies like: "‚úÖ no issues", "No issues found", "LGTM").
          - If CURRENT run finds issues and any prior "no issues" comments exist:
            - Prefer to remove them to avoid confusion:
              - Try deleting top-level issue comments via: gh api -X DELETE repos/${{ github.repository }}/issues/comments/<comment_id>
              - If deletion isn't possible, minimize them via GraphQL (minimizeComment) or edit to prefix "[Superseded by new findings]".
            - If neither delete nor minimize is possible, reply to that comment: "‚ö†Ô∏è Superseded: issues were found in newer commits".
          - If a previously reported issue appears fixed by nearby changes, reply: ‚úÖ This issue appears to be resolved by the recent changes
          - Analyze ONLY for:
            - Null/undefined dereferences
            - Resource leaks (unclosed files or connections)
            - Injection (SQL/XSS)
            - Concurrency/race conditions
            - Missing error handling for critical operations
            - Obvious logic errors with incorrect behavior
            - Clear performance anti-patterns with measurable impact
            - Definitive security vulnerabilities

          - Avoid duplicates: skip if similar feedback already exists on or near the same lines.

          Commenting rules:
          - Max 10 inline comments total; prioritize the most critical issues
          - One issue per comment; place on the exact changed line
          - All issue comments MUST be inline (anchored to a file and line/position in the PR diff)
          - Natural tone, specific and actionable; do not mention automated or high-confidence
          - Use emojis: üö® Critical üîí Security ‚ö° Performance ‚ö†Ô∏è Logic ‚úÖ Resolved ‚ú® Improvement

          Submission:
          - If there are NO issues to report and an existing top-level comment indicating "no issues" already exists (e.g., "‚úÖ no issues", "No issues found", "LGTM"), do NOT submit another comment. Skip submission to avoid redundancy.
          - If there are NO issues to report and NO prior "no issues" comment exists, submit one brief summary comment noting no issues.
          - If there ARE issues to report and a prior "no issues" comment exists, ensure that prior comment is deleted/minimized/marked as superseded before submitting the new review.
          - If there ARE issues to report, submit ONE review containing ONLY inline comments plus an optional concise summary body. Use the GitHub Reviews API to ensure comments are inline:
            - Build a JSON array of comments like: [{ "path": "<file>", "position": <diff_position>, "body": "..." }]
            - Submit via: gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews -f event=COMMENT -f body="$SUMMARY" -f comments='[$COMMENTS_JSON]'
          - Do NOT use: gh pr review --approve or --request-changes

          Blocking behavior:
          - If BLOCKING_REVIEW is true and any üö® or üîí issues were posted: echo "CRITICAL_ISSUES_FOUND=true" >> $GITHUB_ENV
          - Otherwise: echo "CRITICAL_ISSUES_FOUND=false" >> $GITHUB_ENV
          - Always set CRITICAL_ISSUES_FOUND at the end
          PROMPT_EOF

      - name: Check blocking review results
        if: env.BLOCKING_REVIEW_VAR == 'true'
        run: |
          echo "Checking for critical issues..."
          echo "CRITICAL_ISSUES_FOUND: ${CRITICAL_ISSUES_FOUND:-unset}"
          if [ "${CRITICAL_ISSUES_FOUND:-false}" = "true" ]; then
            echo "‚ùå Critical issues found and blocking review is enabled. Failing the workflow."
            exit 1
          else
            echo "‚úÖ No blocking issues found."
          fi

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [code-review]
    if: always()
    permissions:
      pull-requests: write
    steps:
      - name: Get PR details
        id: pr_details
        uses: actions/github-script@v8
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            return { owner, repo, pr_number };

      - name: Get jobs status
        id: jobs_status
        uses: actions/github-script@v8
        with:
          script: |
            const workflowRunId = context.runId;
            const { owner, repo } = context.repo;

            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: workflowRunId,
            });

            const statusMap = {};
            for (const job of jobs.data.jobs) {
              statusMap[job.name] = job.conclusion || job.status;
            }

            core.setOutput('result', JSON.stringify(statusMap));

      - name: Download unit test coverage
        uses: actions/download-artifact@v6
        continue-on-error: true
        with:
          name: unit-coverage
          path: coverage/

      - name: Download E2E test results
        uses: actions/download-artifact@v6
        continue-on-error: true
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/

      - name: Create status comment
        uses: actions/github-script@v8
        if: ${{ needs.code-review.result == 'success' || needs.code-review.result == 'skipped' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, pr_number } = ${{ steps.pr_details.outputs.result }};
            const codeReviewStatus = "${{ needs.code-review.result }}" === "skipped" ? "‚è≠Ô∏è (skipped - draft PR)" : "‚úÖ";

            github.rest.issues.createComment({
            owner,
            repo,
            issue_number: pr_number,
            body: `‚úÖ All checks have passed successfully!\n\n` +
                    `- Lint: ‚úÖ\n` +
                    `- Unit Tests: ‚úÖ\n` +
                    `- E2E Tests: ‚úÖ\n` +
                    `- Code Review: ${codeReviewStatus}\n\n` +
                    `Coverage reports have been uploaded as artifacts.`
            });

      - name: Create failure comment
        uses: actions/github-script@v8
        if: ${{ needs.code-review.result != 'success' && needs.code-review.result != 'skipped' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, pr_number } = ${{ steps.pr_details.outputs.result }};
            const jobsStatusJson = "${{ steps.jobs_status.outputs.result }}";
            const jobsStatus = jobsStatusJson ? JSON.parse(jobsStatusJson) : {};
            const codeReviewResult = "${{ needs.code-review.result }}";

            const lintStatus = jobsStatus["Lint Code"] === "success" ? "‚úÖ" : "‚ùå";
            const unitStatus = jobsStatus["Unit Tests"] === "success" ? "‚úÖ" : "‚ùå";
            const e2eStatus = jobsStatus["E2E Tests"] === "success" ? "‚úÖ" : "‚ùå";
            const codeReviewStatus = codeReviewResult === "skipped" ? "‚è≠Ô∏è (skipped - draft PR)" : (codeReviewResult === "success" ? "‚úÖ" : "‚ùå");

            github.rest.issues.createComment({
            owner,
            repo,
            issue_number: pr_number,
            body: `‚ùå Some checks have failed!\n\n` +
                    `- Lint: ${lintStatus}\n` +
                    `- Unit Tests: ${unitStatus}\n` +
                    `- E2E Tests: ${e2eStatus}\n` +
                    `- Code Review: ${codeReviewStatus}\n\n` +
                    `Please check the workflow logs for details.`
            });
